// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): BigInt {
    let value = this.get("poolid");
    return value.toBigInt();
  }

  set poolid(value: BigInt) {
    this.set("poolid", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get lpaddress(): string {
    let value = this.get("lpaddress");
    return value.toString();
  }

  set lpaddress(value: string) {
    this.set("lpaddress", Value.fromString(value));
  }

  get poolname(): string {
    let value = this.get("poolname");
    return value.toString();
  }

  set poolname(value: string) {
    this.set("poolname", Value.fromString(value));
  }

  get startblockheight(): BigInt {
    let value = this.get("startblockheight");
    return value.toBigInt();
  }

  set startblockheight(value: BigInt) {
    this.set("startblockheight", Value.fromBigInt(value));
  }

  get rewardtotal(): BigInt {
    let value = this.get("rewardtotal");
    return value.toBigInt();
  }

  set rewardtotal(value: BigInt) {
    this.set("rewardtotal", Value.fromBigInt(value));
  }

  get rewardperblock(): BigInt {
    let value = this.get("rewardperblock");
    return value.toBigInt();
  }

  set rewardperblock(value: BigInt) {
    this.set("rewardperblock", Value.fromBigInt(value));
  }

  get rewardmultiple(): BigInt {
    let value = this.get("rewardmultiple");
    return value.toBigInt();
  }

  set rewardmultiple(value: BigInt) {
    this.set("rewardmultiple", Value.fromBigInt(value));
  }

  get priority(): BigInt {
    let value = this.get("priority");
    return value.toBigInt();
  }

  set priority(value: BigInt) {
    this.set("priority", Value.fromBigInt(value));
  }

  get isfinshed(): boolean {
    let value = this.get("isfinshed");
    return value.toBoolean();
  }

  set isfinshed(value: boolean) {
    this.set("isfinshed", Value.fromBoolean(value));
  }

  get staketotaldnow(): BigInt {
    let value = this.get("staketotaldnow");
    return value.toBigInt();
  }

  set staketotaldnow(value: BigInt) {
    this.set("staketotaldnow", Value.fromBigInt(value));
  }

  get rewardcanwithdrawnow(): BigInt {
    let value = this.get("rewardcanwithdrawnow");
    return value.toBigInt();
  }

  set rewardcanwithdrawnow(value: BigInt) {
    this.set("rewardcanwithdrawnow", Value.fromBigInt(value));
  }

  get totalpower(): BigInt | null {
    let value = this.get("totalpower");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalpower(value: BigInt | null) {
    if (value === null) {
      this.unset("totalpower");
    } else {
      this.set("totalpower", Value.fromBigInt(value as BigInt));
    }
  }

  get user(): Array<string> | null {
    let value = this.get("user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set user(value: Array<string> | null) {
    if (value === null) {
      this.unset("user");
    } else {
      this.set("user", Value.fromStringArray(value as Array<string>));
    }
  }

  get poollist(): Array<string> | null {
    let value = this.get("poollist");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set poollist(value: Array<string> | null) {
    if (value === null) {
      this.unset("poollist");
    } else {
      this.set("poollist", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class PoolUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolUser", id.toString(), this);
  }

  static load(id: string): PoolUser | null {
    return store.get("PoolUser", id) as PoolUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get user(): Array<string> | null {
    let value = this.get("user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set user(value: Array<string> | null) {
    if (value === null) {
      this.unset("user");
    } else {
      this.set("user", Value.fromStringArray(value as Array<string>));
    }
  }

  get poolsinfo(): Array<string> | null {
    let value = this.get("poolsinfo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set poolsinfo(value: Array<string> | null) {
    if (value === null) {
      this.unset("poolsinfo");
    } else {
      this.set("poolsinfo", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class UserPoolList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserPoolList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserPoolList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserPoolList", id.toString(), this);
  }

  static load(id: string): UserPoolList | null {
    return store.get("UserPoolList", id) as UserPoolList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get stake(): BigInt {
    let value = this.get("stake");
    return value.toBigInt();
  }

  set stake(value: BigInt) {
    this.set("stake", Value.fromBigInt(value));
  }

  get stakepower(): BigInt {
    let value = this.get("stakepower");
    return value.toBigInt();
  }

  set stakepower(value: BigInt) {
    this.set("stakepower", Value.fromBigInt(value));
  }

  get invitepower(): BigInt {
    let value = this.get("invitepower");
    return value.toBigInt();
  }

  set invitepower(value: BigInt) {
    this.set("invitepower", Value.fromBigInt(value));
  }

  get rewardbalance(): BigInt {
    let value = this.get("rewardbalance");
    return value.toBigInt();
  }

  set rewardbalance(value: BigInt) {
    this.set("rewardbalance", Value.fromBigInt(value));
  }

  get rewardsT(): BigInt {
    let value = this.get("rewardsT");
    return value.toBigInt();
  }

  set rewardsT(value: BigInt) {
    this.set("rewardsT", Value.fromBigInt(value));
  }

  get rewardwithdrawT(): BigInt {
    let value = this.get("rewardwithdrawT");
    return value.toBigInt();
  }

  set rewardwithdrawT(value: BigInt) {
    this.set("rewardwithdrawT", Value.fromBigInt(value));
  }
}

export class AllPoolInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AllPoolInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AllPoolInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AllPoolInfo", id.toString(), this);
  }

  static load(id: string): AllPoolInfo | null {
    return store.get("AllPoolInfo", id) as AllPoolInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardstotal(): BigInt {
    let value = this.get("rewardstotal");
    return value.toBigInt();
  }

  set rewardstotal(value: BigInt) {
    this.set("rewardstotal", Value.fromBigInt(value));
  }

  get rewardswithdrawT(): BigInt {
    let value = this.get("rewardswithdrawT");
    return value.toBigInt();
  }

  set rewardswithdrawT(value: BigInt) {
    this.set("rewardswithdrawT", Value.fromBigInt(value));
  }
}

export class InviteRegisterRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InviteRegisterRecord entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InviteRegisterRecord entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InviteRegisterRecord", id.toString(), this);
  }

  static load(id: string): InviteRegisterRecord | null {
    return store.get("InviteRegisterRecord", id) as InviteRegisterRecord | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}
