// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EndPool extends ethereum.Event {
  get params(): EndPool__Params {
    return new EndPool__Params(this);
  }
}

export class EndPool__Params {
  _event: EndPool;

  constructor(event: EndPool) {
    this._event = event;
  }

  get pool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InviteRegister extends ethereum.Event {
  get params(): InviteRegister__Params {
    return new InviteRegister__Params(this);
  }
}

export class InviteRegister__Params {
  _event: InviteRegister;

  constructor(event: InviteRegister) {
    this._event = event;
  }

  get self(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get pool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get pool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UnStake extends ethereum.Event {
  get params(): UnStake__Params {
    return new UnStake__Params(this);
  }
}

export class UnStake__Params {
  _event: UnStake;

  constructor(event: UnStake) {
    this._event = event;
  }

  get pool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }

  get action(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get pool(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get startBlock(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rewardTotal(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get rewardPerBlock(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get multiple(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get priority(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class UpdatePower extends ethereum.Event {
  get params(): UpdatePower__Params {
    return new UpdatePower__Params(this);
  }
}

export class UpdatePower__Params {
  _event: UpdatePower;

  constructor(event: UpdatePower) {
    this._event = event;
  }

  get pool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalPower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get ownerInvitePower(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get ownerPledgePower(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get upper1(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get upper1InvitePower(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get upper2(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get upper2InvitePower(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class WithdrawReward extends ethereum.Event {
  get params(): WithdrawReward__Params {
    return new WithdrawReward__Params(this);
  }
}

export class WithdrawReward__Params {
  _event: WithdrawReward;

  constructor(event: WithdrawReward) {
    this._event = event;
  }

  get pool(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Earnpool__pledgeUserInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Earnpool__poolInfosResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Earnpool__poolViewInfosResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: string, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Earnpool__rewardInfosResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Earnpool extends ethereum.SmartContract {
  static bind(address: Address): Earnpool {
    return new Earnpool("Earnpool", address);
  }

  addPool(
    _name: string,
    _lp: Address,
    _startBlock: BigInt,
    _rewardTotal: BigInt
  ): boolean {
    let result = super.call(
      "addPool",
      "addPool(string,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromAddress(_lp),
        ethereum.Value.fromUnsignedBigInt(_startBlock),
        ethereum.Value.fromUnsignedBigInt(_rewardTotal)
      ]
    );

    return result[0].toBoolean();
  }

  try_addPool(
    _name: string,
    _lp: Address,
    _startBlock: BigInt,
    _rewardTotal: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addPool",
      "addPool(string,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromAddress(_lp),
        ethereum.Value.fromUnsignedBigInt(_startBlock),
        ethereum.Value.fromUnsignedBigInt(_rewardTotal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  blockNumber(): BigInt {
    let result = super.call("blockNumber", "blockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockNumber", "blockNumber():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deployBlock(): BigInt {
    let result = super.call("deployBlock", "deployBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deployBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deployBlock", "deployBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Allowance(_token: Address, _owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "erc20Allowance",
      "erc20Allowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_spender)
      ]
    );

    return result[0].toBigInt();
  }

  try_erc20Allowance(
    _token: Address,
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "erc20Allowance",
      "erc20Allowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Balance(_token: Address, _address: Address): BigInt {
    let result = super.call(
      "erc20Balance",
      "erc20Balance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token), ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_erc20Balance(
    _token: Address,
    _address: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "erc20Balance",
      "erc20Balance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Supply(_token: Address): BigInt {
    let result = super.call("erc20Supply", "erc20Supply(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_erc20Supply(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "erc20Supply",
      "erc20Supply(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  invite(): Address {
    let result = super.call("invite", "invite():(address)", []);

    return result[0].toAddress();
  }

  try_invite(): ethereum.CallResult<Address> {
    let result = super.tryCall("invite", "invite():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  invite1Reward(): BigInt {
    let result = super.call("invite1Reward", "invite1Reward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_invite1Reward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "invite1Reward",
      "invite1Reward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  invite2Reward(): BigInt {
    let result = super.call("invite2Reward", "invite2Reward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_invite2Reward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "invite2Reward",
      "invite2Reward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inviteSelfReward(): BigInt {
    let result = super.call(
      "inviteSelfReward",
      "inviteSelfReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_inviteSelfReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inviteSelfReward",
      "inviteSelfReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operateOwner(param0: Address): boolean {
    let result = super.call("operateOwner", "operateOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_operateOwner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("operateOwner", "operateOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingReward(_pool: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pool),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(
    _pool: BigInt,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pool),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pledgeAddresss(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "pledgeAddresss",
      "pledgeAddresss(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_pledgeAddresss(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pledgeAddresss",
      "pledgeAddresss(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pledgeUserInfo(
    param0: BigInt,
    param1: Address
  ): Earnpool__pledgeUserInfoResult {
    let result = super.call(
      "pledgeUserInfo",
      "pledgeUserInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new Earnpool__pledgeUserInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_pledgeUserInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Earnpool__pledgeUserInfoResult> {
    let result = super.tryCall(
      "pledgeUserInfo",
      "pledgeUserInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Earnpool__pledgeUserInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  poolCount(): BigInt {
    let result = super.call("poolCount", "poolCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolCount", "poolCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfos(param0: BigInt): Earnpool__poolInfosResult {
    let result = super.call(
      "poolInfos",
      "poolInfos(uint256):(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Earnpool__poolInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_poolInfos(
    param0: BigInt
  ): ethereum.CallResult<Earnpool__poolInfosResult> {
    let result = super.tryCall(
      "poolInfos",
      "poolInfos(uint256):(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Earnpool__poolInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  poolNumbers(_lp: Address): Array<BigInt> {
    let result = super.call("poolNumbers", "poolNumbers(address):(uint256[])", [
      ethereum.Value.fromAddress(_lp)
    ]);

    return result[0].toBigIntArray();
  }

  try_poolNumbers(_lp: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "poolNumbers",
      "poolNumbers(address):(uint256[])",
      [ethereum.Value.fromAddress(_lp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  poolPledgeAddresss(_pool: BigInt): Array<Address> {
    let result = super.call(
      "poolPledgeAddresss",
      "poolPledgeAddresss(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_pool)]
    );

    return result[0].toAddressArray();
  }

  try_poolPledgeAddresss(_pool: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "poolPledgeAddresss",
      "poolPledgeAddresss(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  poolViewInfos(param0: BigInt): Earnpool__poolViewInfosResult {
    let result = super.call(
      "poolViewInfos",
      "poolViewInfos(uint256):(address,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Earnpool__poolViewInfosResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_poolViewInfos(
    param0: BigInt
  ): ethereum.CallResult<Earnpool__poolViewInfosResult> {
    let result = super.tryCall(
      "poolViewInfos",
      "poolViewInfos(uint256):(address,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Earnpool__poolViewInfosResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  powerScale(_pool: BigInt, _user: Address): BigInt {
    let result = super.call(
      "powerScale",
      "powerScale(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pool),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_powerScale(_pool: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "powerScale",
      "powerScale(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pool),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardContribute(_user: Address, _lower: Address): BigInt {
    let result = super.call(
      "rewardContribute",
      "rewardContribute(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_lower)]
    );

    return result[0].toBigInt();
  }

  try_rewardContribute(
    _user: Address,
    _lower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardContribute",
      "rewardContribute(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_lower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardInfos(param0: Address): Earnpool__rewardInfosResult {
    let result = super.call(
      "rewardInfos",
      "rewardInfos(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Earnpool__rewardInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rewardInfos(
    param0: Address
  ): ethereum.CallResult<Earnpool__rewardInfosResult> {
    let result = super.tryCall(
      "rewardInfos",
      "rewardInfos(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Earnpool__rewardInfosResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  rewardPerBlock(): BigInt {
    let result = super.call("rewardPerBlock", "rewardPerBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerBlock",
      "rewardPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTotal(): BigInt {
    let result = super.call("rewardTotal", "rewardTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardTotal", "rewardTotal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  selfReward(_user: Address): BigInt {
    let result = super.call("selfReward", "selfReward(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_selfReward(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("selfReward", "selfReward(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  you(): Address {
    let result = super.call("you", "you():(address)", []);

    return result[0].toAddress();
  }

  try_you(): ethereum.CallResult<Address> {
    let result = super.tryCall("you", "you():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _you(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _invite(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _lp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewardTotal(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class SetInviteCall extends ethereum.Call {
  get inputs(): SetInviteCall__Inputs {
    return new SetInviteCall__Inputs(this);
  }

  get outputs(): SetInviteCall__Outputs {
    return new SetInviteCall__Outputs(this);
  }
}

export class SetInviteCall__Inputs {
  _call: SetInviteCall;

  constructor(call: SetInviteCall) {
    this._call = call;
  }

  get _invite(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInviteCall__Outputs {
  _call: SetInviteCall;

  constructor(call: SetInviteCall) {
    this._call = call;
  }
}

export class SetMultipleCall extends ethereum.Call {
  get inputs(): SetMultipleCall__Inputs {
    return new SetMultipleCall__Inputs(this);
  }

  get outputs(): SetMultipleCall__Outputs {
    return new SetMultipleCall__Outputs(this);
  }
}

export class SetMultipleCall__Inputs {
  _call: SetMultipleCall;

  constructor(call: SetMultipleCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _multiple(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMultipleCall__Outputs {
  _call: SetMultipleCall;

  constructor(call: SetMultipleCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetOperateOwnerCall extends ethereum.Call {
  get inputs(): SetOperateOwnerCall__Inputs {
    return new SetOperateOwnerCall__Inputs(this);
  }

  get outputs(): SetOperateOwnerCall__Outputs {
    return new SetOperateOwnerCall__Outputs(this);
  }
}

export class SetOperateOwnerCall__Inputs {
  _call: SetOperateOwnerCall;

  constructor(call: SetOperateOwnerCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperateOwnerCall__Outputs {
  _call: SetOperateOwnerCall;

  constructor(call: SetOperateOwnerCall) {
    this._call = call;
  }
}

export class SetPriorityCall extends ethereum.Call {
  get inputs(): SetPriorityCall__Inputs {
    return new SetPriorityCall__Inputs(this);
  }

  get outputs(): SetPriorityCall__Outputs {
    return new SetPriorityCall__Outputs(this);
  }
}

export class SetPriorityCall__Inputs {
  _call: SetPriorityCall;

  constructor(call: SetPriorityCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _priority(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPriorityCall__Outputs {
  _call: SetPriorityCall;

  constructor(call: SetPriorityCall) {
    this._call = call;
  }
}

export class SetRewardPerBlockCall extends ethereum.Call {
  get inputs(): SetRewardPerBlockCall__Inputs {
    return new SetRewardPerBlockCall__Inputs(this);
  }

  get outputs(): SetRewardPerBlockCall__Outputs {
    return new SetRewardPerBlockCall__Outputs(this);
  }
}

export class SetRewardPerBlockCall__Inputs {
  _call: SetRewardPerBlockCall;

  constructor(call: SetRewardPerBlockCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardPerBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardPerBlockCall__Outputs {
  _call: SetRewardPerBlockCall;

  constructor(call: SetRewardPerBlockCall) {
    this._call = call;
  }
}

export class SetRewardTotalCall extends ethereum.Call {
  get inputs(): SetRewardTotalCall__Inputs {
    return new SetRewardTotalCall__Inputs(this);
  }

  get outputs(): SetRewardTotalCall__Outputs {
    return new SetRewardTotalCall__Outputs(this);
  }
}

export class SetRewardTotalCall__Inputs {
  _call: SetRewardTotalCall;

  constructor(call: SetRewardTotalCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardTotal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardTotalCall__Outputs {
  _call: SetRewardTotalCall;

  constructor(call: SetRewardTotalCall) {
    this._call = call;
  }
}

export class SetYouCall extends ethereum.Call {
  get inputs(): SetYouCall__Inputs {
    return new SetYouCall__Inputs(this);
  }

  get outputs(): SetYouCall__Outputs {
    return new SetYouCall__Outputs(this);
  }
}

export class SetYouCall__Inputs {
  _call: SetYouCall;

  constructor(call: SetYouCall) {
    this._call = call;
  }

  get _you(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetYouCall__Outputs {
  _call: SetYouCall;

  constructor(call: SetYouCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pool(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
